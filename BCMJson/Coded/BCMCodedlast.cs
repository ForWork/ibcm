//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace BCMJson {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using Microsoft.VisualStudio.TestTools.WebTesting;
    using Microsoft.VisualStudio.TestTools.WebTesting.Rules;
    
    [DeploymentItem("bcmjson\\Parameters\\parameters.csv")]
    [DataSource("DataBase", "Microsoft.VisualStudio.TestTools.DataSource.CSV", "|DataDirectory|\\parameters.csv", Microsoft.VisualStudio.TestTools.WebTesting.DataBindingAccessMethod.Sequential, Microsoft.VisualStudio.TestTools.WebTesting.DataBindingSelectColumns.SelectOnlyBoundColumns, "parameters#csv")]
    [DataBinding("DataBase", "parameters#csv", "п»їuser", "DataBase.parameters#csv.п»їuser")]
    [DataBinding("DataBase", "parameters#csv", "password", "DataBase.parameters#csv.password")]
    [DataBinding("DataBase", "parameters#csv", "searchContact", "DataBase.parameters#csv.searchContact")]
    [DataBinding("DataBase", "parameters#csv", "searchDeal", "DataBase.parameters#csv.searchDeal")]
    [DataBinding("DataBase", "parameters#csv", "phone", "DataBase.parameters#csv.phone")]
    [DataBinding("DataBase", "parameters#csv", "note", "DataBase.parameters#csv.note")]
    [DataBinding("DataBase", "parameters#csv", "ContactName", "DataBase.parameters#csv.ContactName")]
    [DataBinding("DataBase", "parameters#csv", "ContactLastName", "DataBase.parameters#csv.ContactLastName")]
    [DataBinding("DataBase", "parameters#csv", "ContactEmail", "DataBase.parameters#csv.ContactEmail")]
    [DataBinding("DataBase", "parameters#csv", "ContactCity", "DataBase.parameters#csv.ContactCity")]
    [DataBinding("DataBase", "parameters#csv", "dateDay", "DataBase.parameters#csv.dateDay")]
    [DataBinding("DataBase", "parameters#csv", "dateMonth", "DataBase.parameters#csv.dateMonth")]
    [DataBinding("DataBase", "parameters#csv", "dateYear", "DataBase.parameters#csv.dateYear")]
    [DataBinding("DataBase", "parameters#csv", "fax", "DataBase.parameters#csv.fax")]
    [DataBinding("DataBase", "parameters#csv", "editDay", "DataBase.parameters#csv.editDay")]
    [DataBinding("DataBase", "parameters#csv", "editMonth", "DataBase.parameters#csv.editMonth")]
    [DataBinding("DataBase", "parameters#csv", "editYear", "DataBase.parameters#csv.editYear")]
    [DataBinding("DataBase", "parameters#csv", "task", "DataBase.parameters#csv.task")]
    [DataBinding("DataBase", "parameters#csv", "estimatedRevenue", "DataBase.parameters#csv.estimatedRevenue")]
    [DataBinding("DataBase", "parameters#csv", "doc", "DataBase.parameters#csv.doc")]
    [DataBinding("DataBase", "parameters#csv", "message", "DataBase.parameters#csv.message")]
    [DataBinding("DataBase", "parameters#csv", "deal", "DataBase.parameters#csv.deal")]
    [DataBinding("DataBase", "parameters#csv", "newDeal", "DataBase.parameters#csv.newDeal")]
    public class BCMCodedlast : WebTest {
        
        public BCMCodedlast() {
            Context.Add("WebServer1", "http://ibcmperformance.cloudapp.net");
            Context.Add("WebServer2", "https://login.microsoftonline.com");
            Context.Add("WebServer3", "https%3a%2f%2flogin.windows.net");
            Context.Add("WebServer4", "https://login.windows.net");
            Context.Add("WebServer5", "https://ibcmperformance.cloudapp.net");
            PreAuthenticate = true;
            Proxy = "default";
        }
        
        public override IEnumerator<WebTestRequest> GetRequestEnumerator() {
            if ((Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.Low)) {
                ValidateResponseUrl validationRule1 = new ValidateResponseUrl();
                ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule1.Validate);
            }
            if ((Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.Low)) {
                ValidationRuleResponseTimeGoal validationRule2 = new ValidationRuleResponseTimeGoal();
                validationRule2.Tolerance = 0D;
                ValidateResponseOnPageComplete += new EventHandler<ValidationEventArgs>(validationRule2.Validate);
            }

            Random rand = new Random();
            int temp;
            string pattern = "\"";

            BeginTransaction("Load Sign in Page");

            WebTestRequest request1 = new WebTestRequest(Context["WebServer1"].ToString());
            request1.ThinkTime = 20;
            request1.ExpectedResponseUrl = @"https://login.microsoftonline.com/login.srf?wa=wsignin1.0&wtrealm=https%3a%2f%2flogin.windows.net&wreply=https%3a%2f%2flogin.windows.net%2fcommon%2fwsfederation&wctx=3wEBDFdzRmVkZXJhdGlvbgENVXNlck9ubHlUb2tlbgABAQEGc2FtbDIwAAABATFodHRwczovL2lCQ01BenVyZS5vbm1pY3Jvc29mdC5jb20vaWJjbXBlcmZvcm1hbmNlAAABAQEMcmVwbHlhZGRyZXNzAAEFAQJyYwEWcm09MCZpZD1wYXNzaXZlJnJ1PSUyZgEPbGltaXRfdG9rZW5zaXplAQVGYWxzZQELaW50ZXJhY3RpdmUBBFRydWUBD0ZvcmNlRnJlc2hMb2dpbgEFRmFsc2UBCXNlc3Npb25JZAEkYzIxNTZiNzEtNjJjZS00YjM3LTg4NjktMDdmM2Q5NWEwODNh7Q2&wp=MBI_FED_SSL&id=";
            request1.ExtractValues += new ExtractHiddenFields
            {
                Required = true,
                ContextParameterName = "1",
            }.Extract;
            request1.ExtractValues += new ExtractText
            {
                StartsWith = "&wctx=",
                EndsWith = "&",
                Required = false,
                ContextParameterName = "QueryStringParam57.wctx",
            }.Extract;
            request1.ExtractValues += new ExtractText
            {
                StartsWith = "&bk=",
                EndsWith = "\"",
                Required = false,
                ContextParameterName = "QueryStringParam59.bk",
            }.Extract;
            yield return request1;

            EndTransaction("Load Sign in Page");

            BeginTransaction("Enter in profile");

            WebTestRequest request2 = new WebTestRequest((Context["WebServer2"] + "/GetUserRealm.srf"));
            request2.ThinkTime = 20;
            request2.QueryStringParameters.Add("login", Context["DataBase.parameters#csv.п»їuser"].ToString(), false, false);
            request2.QueryStringParameters.Add("handler", "1", false, false);
            request2.QueryStringParameters.Add("extended", "1", false, false);
            yield return request2;

            WebTestRequest request3 = new WebTestRequest((Context["WebServer2"] + "/ppsecure/post.srf"));
            request3.ThinkTime = 20;
            request3.Method = "POST";
            request3.QueryStringParameters.Add("wa", "wsignin1.0", false, false);
            request3.QueryStringParameters.Add("wtrealm", Context["WebServer3"].ToString(), false, false);
            request3.QueryStringParameters.Add("wreply", (Context["WebServer3"].ToString() + "%2fcommon%2fwsfederation"), false, false);
            request3.QueryStringParameters.Add("wctx", Context["QueryStringParam57.wctx"].ToString(), false, false);
            request3.QueryStringParameters.Add("wp", "MBI_FED_SSL", false, false);
            request3.QueryStringParameters.Add("id", "", false, false);
            request3.QueryStringParameters.Add("bk", Context["QueryStringParam59.bk"].ToString(), false, false);
            FormPostHttpBody request3Body = new FormPostHttpBody();
            request3Body.FormPostParameters.Add("login", Context["DataBase.parameters#csv.п»їuser"].ToString());
            request3Body.FormPostParameters.Add("passwd", Context["DataBase.parameters#csv.password"].ToString());
            request3Body.FormPostParameters.Add("PPSX", Context["$HIDDEN1.PPSX"].ToString());
            request3Body.FormPostParameters.Add("PPFT", Context["$HIDDEN1.PPFT"].ToString());
            request3Body.FormPostParameters.Add("n1", "85987");
            request3Body.FormPostParameters.Add("n2", "-1410977146000");
            request3Body.FormPostParameters.Add("n3", "-1410977146000");
            request3Body.FormPostParameters.Add("n4", "87107");
            request3Body.FormPostParameters.Add("n5", "87107");
            request3Body.FormPostParameters.Add("n6", "87107");
            request3Body.FormPostParameters.Add("n7", "87107");
            request3Body.FormPostParameters.Add("n8", "NaN");
            request3Body.FormPostParameters.Add("n9", "87107");
            request3Body.FormPostParameters.Add("n10", "87107");
            request3Body.FormPostParameters.Add("n11", "87132");
            request3Body.FormPostParameters.Add("n12", "87134");
            request3Body.FormPostParameters.Add("n13", "87132");
            request3Body.FormPostParameters.Add("n14", "87213");
            request3Body.FormPostParameters.Add("n15", "25");
            request3Body.FormPostParameters.Add("n16", "87239");
            request3Body.FormPostParameters.Add("n17", "87240");
            request3Body.FormPostParameters.Add("n18", "87249");
            request3Body.FormPostParameters.Add("n19", "187.6124886534235");
            request3Body.FormPostParameters.Add("n20", "1");
            request3Body.FormPostParameters.Add("n21", "0");
            request3Body.FormPostParameters.Add("n22", "0");
            request3Body.FormPostParameters.Add("n23", "1");
            request3Body.FormPostParameters.Add("n24", "11.904773299768066");
            request3Body.FormPostParameters.Add("n25", "0");
            request3Body.FormPostParameters.Add("n26", "0");
            request3Body.FormPostParameters.Add("n27", "0");
            request3Body.FormPostParameters.Add("n28", "0");
            request3Body.FormPostParameters.Add("n29", "-1410977233195");
            request3Body.FormPostParameters.Add("n30", "-1410977233195");
            request3Body.FormPostParameters.Add("n31", "0");
            request3Body.FormPostParameters.Add("n32", "0");
            request3Body.FormPostParameters.Add("n33", "0");
            request3Body.FormPostParameters.Add("n34", "0");
            request3Body.FormPostParameters.Add("n35", "0");
            request3Body.FormPostParameters.Add("n36", "0");
            request3Body.FormPostParameters.Add("n37", "0");
            request3Body.FormPostParameters.Add("n38", "0");
            request3Body.FormPostParameters.Add("n39", "0");
            request3Body.FormPostParameters.Add("n40", "0");
            request3Body.FormPostParameters.Add("n41", "1263.3749228273197");
            request3Body.FormPostParameters.Add("n42", "1245.663573378257");
            request3Body.FormPostParameters.Add("n43", "1262.583334529809");
            request3Body.FormPostParameters.Add("type", "11");
            request3Body.FormPostParameters.Add("LoginOptions", "3");
            request3Body.FormPostParameters.Add("NewUser", "1");
            request3Body.FormPostParameters.Add("idsbho", "1");
            request3Body.FormPostParameters.Add("PwdPad", "");
            request3Body.FormPostParameters.Add("sso", "");
            request3Body.FormPostParameters.Add("vv", "");
            request3Body.FormPostParameters.Add("uiver", "1");
            request3Body.FormPostParameters.Add("i12", "1");
            request3Body.FormPostParameters.Add("i13", "Firefox");
            request3Body.FormPostParameters.Add("i14", "11.0");
            request3Body.FormPostParameters.Add("i15", "758");
            request3Body.FormPostParameters.Add("i16", "607");
            request3.Body = request3Body;
            request3.ExtractValues += new ExtractHiddenFields
            {
                Required = true,
                ContextParameterName = "1",
            }.Extract;
            yield return request3;

            WebTestRequest request4 = new WebTestRequest((Context["WebServer4"] + "/common/wsfederation"));
            request4.ThinkTime = 20;
            request4.Method = "POST";
            FormPostHttpBody request4Body = new FormPostHttpBody();
            request4Body.FormPostParameters.Add("wctx", Context["$HIDDEN1.wctx"].ToString());
            request4Body.FormPostParameters.Add("wresult", Context["$HIDDEN1.wresult"].ToString());
            request4Body.FormPostParameters.Add("wa", Context["$HIDDEN1.wa"].ToString());
            request4.Body = request4Body;
            request4.ExtractValues += new ExtractHiddenFields
            {
                Required = true,
                ContextParameterName = "1",
            }.Extract;
            yield return request4;

            WebTestRequest request5 = new WebTestRequest((Context["WebServer5"] + "/"));
            request5.ThinkTime = 20;
            request5.Method = "POST";
            FormPostHttpBody request5Body = new FormPostHttpBody();
            request5Body.FormPostParameters.Add("wa", Context["$HIDDEN1.wa"].ToString());
            request5Body.FormPostParameters.Add("wresult", Context["$HIDDEN1.wresult"].ToString());
            request5Body.FormPostParameters.Add("wctx", Context["$HIDDEN1.wctx"].ToString());
            request5.Body = request5Body;
            WebTestRequest request5Dependent1 = new WebTestRequest((Context["WebServer5"] + "/api/User/Get"));
            request5Dependent1.ThinkTime = 20;
            request5.DependentRequests.Add(request5Dependent1);
            yield return request5;

            WebTestRequest request6 = new WebTestRequest((Context["WebServer5"] + "/api/Contacts/"));
            request6.ThinkTime = 20;
            yield return request6;

            EndTransaction("Enter in profile");

            BeginTransaction("Add new contact");

            WebTestRequest request7 = new WebTestRequest((Context["WebServer5"] + "/api/Companies/GetCompanyLookupModels/"));
            request7.ThinkTime = 20;
            yield return request7;

            WebTestRequest addContactRequest = new WebTestRequest((Context["WebServer5"] + "/api/Contacts/"));
            addContactRequest.ThinkTime = 20;
            addContactRequest.Method = "PUT";
            StringHttpBody request8Body = new StringHttpBody();
            request8Body.ContentType = "application/json;charset=utf-8";
            request8Body.BodyString = @"{""FullName"":"""",""FirstName"":""" + Context["DataBase.parameters#csv.ContactName"] +@""",""MiddleName"":"""",
            ""LastName"":""" + Context["DataBase.parameters#csv.ContactLastName"] + @""",""Name"":"""",""Photo"":"""",
            ""Company"":{""Id"":""567e04af-27bf-4e3e-b02d-e3e4f52ccb6e"",""Name"":""Atom"",""PrimaryContact"":""Andy White""},""Title"":"""",
            ""BusinessPhone"":"""",""CellPhone"":"""",""Email"":""" + Context["DataBase.parameters#csv.ContactEmail"] + @""",""BusinessAddressStreet"":"""",
            ""BusinessAddressCity"":""" + Context["DataBase.parameters#csv.ContactCity"] + @""",""BusinessAddressState"":"""",""BusinessAddressZip"":"""",
            ""BusinessAddressCountry"":"""",""HomeAddressStreet"":"""",""HomeAddressCity"":"""",""HomeAddressState"":"""",""HomeAddressZip"":"""",
            ""HomeAddressCountry"":"""",""Birthday"":null,""Anniversary"":null,""PartnerName"":{""Id"":null,""Name"":"""",""FirstName"":"""",""LastName"":"""",
            ""PhotoUrl"":null,""Company"":"""",""JobTitle"":"""",""Phone"":"""",""Email"":""""},""ChildrenNames"":"""",""ManagerName"":{""Id"":null,""Name"":"""",
            ""FirstName"":"""",""LastName"":"""",""PhotoUrl"":null,""Company"":"""",""JobTitle"":"""",""Phone"":"""",""Email"":""""},
            ""AssistantName"":{""Id"":null,""Name"":"""",""FirstName"":"""",""LastName"":"""",""PhotoUrl"":null,""Company"":"""",""JobTitle"":"""",""Phone"":"""",""Email"":""""},
            ""Fax"":"""",""CompanyUrl"":"""",""Description"":"""",""LastContactedDays"":0,""CountOngoingDeals"":0,""SpentWithUs"":0,""Timestamp"":""""}";
            addContactRequest.Body = request8Body;
            yield return addContactRequest;

            Context["contact_id"] = Regex.Replace(LastResponse.BodyString, pattern, String.Empty);

            addContactRequest.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Contacts/GetContactInfo/" + Context["contact_id"])));

            addContactRequest.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Contacts/" + Context["contact_id"])));

            addContactRequest.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Companies/GetCompanyLookupModels/")));

            addContactRequest.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Contacts/GetContactLookupModels/")));

            addContactRequest.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Notes/GetByContactId")));


            addContactRequest.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Deals/GetOpenDealsAsDealInfo")));

            WebTestRequest request18 = new WebTestRequest((Context["WebServer5"] + "/api/Tasks/GetUpcomingTasksByContactId"));
            request18.ThinkTime = 20;
            request18.QueryStringParameters.Add("contactId", Context["contact_id"].ToString(), false, false);
            yield return request18;

            EndTransaction("Add new contact");

            BeginTransaction("Setup date");

            WebTestRequest request19 = new WebTestRequest((Context["WebServer5"] + "/api/Tasks/SaveTodo/"));
            request19.ThinkTime = 20;
            request19.Method = "POST";
            StringHttpBody request19Body = new StringHttpBody();
            request19Body.ContentType = "application/json;charset=utf-8";
            request19Body.BodyString = "{\"DueDate\":{\"Date\":\"" + Context["DataBase.parameters#csv.dateDay"] 
                + "\",\"Month\":\"" + Context["DataBase.parameters#csv.dateMonth"] + "\",\"Year\":\"" 
                + Context["DataBase.parameters#csv.dateYear"] + "\"},\"TaskStatusIsOpen\":1,\"ContactFollow" +
                "Up\":true,\"RelatedEntityType\":0,\"ContactId\":\"" + Context["contact_id"] + "\"}";
            request19.Body = request19Body;
            yield return request19;

            request19.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Contacts/" + Context["contact_id"])));

            request19.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Companies/GetCompanyLookupModels/")));

            request19.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Contacts/GetContactLookupModels/")));

            WebTestRequest request25 = new WebTestRequest((Context["WebServer5"] + "/api/Notes/GetByContactId"));
            request25.ThinkTime = 20;
            request25.QueryStringParameters.Add("contactId", Context["contact_id"].ToString(), false, false);
            yield return request25;

            WebTestRequest request26 = new WebTestRequest((Context["WebServer5"] + "/api/Deals/GetOpenDealsAsDealInfo"));
            request26.ThinkTime = 20;
            request26.QueryStringParameters.Add("contactId", Context["contact_id"].ToString(), false, false);
            yield return request26;

            WebTestRequest request28 = new WebTestRequest((Context["WebServer5"] + "/api/Tasks/GetUpcomingTasksByContactId"));
            request28.ThinkTime = 20;
            request28.QueryStringParameters.Add("contactId", Context["contact_id"].ToString(), false, false);
            yield return request28;

            EndTransaction("Setup date");

            BeginTransaction("Add note");
            WebTestRequest request29 = new WebTestRequest((Context["WebServer5"] + "/api/Notes/Create"));
            request29.ThinkTime = 20;
            request29.Method = "POST";
            StringHttpBody request29Body = new StringHttpBody();
            request29Body.ContentType = "application/json;charset=utf-8";
            request29Body.BodyString = "{\"Content\":\"" + Context["DataBase.parameters#csv.note"] + "\",\"ContactId\":\"" + Context["contact_id"] + "\"}";
            request29.Body = request29Body;
            yield return request29;

            EndTransaction("Add note");

            BeginTransaction("Search for another contact");

            WebTestRequest request30 = new WebTestRequest((Context["WebServer5"] + "/api/Search/Get"));
            request30.ThinkTime = 20;
            request30.QueryStringParameters.Add("searchText", Context["DataBase.parameters#csv.searchContact"].ToString(), false, false);
            request30.ExtractValues += new ExtractText
            {
                StartsWith = "{\"Id\":\"",
                EndsWith = "\"",
                ContextParameterName = "foundContact",
                ExtractRandomMatch = true,
            }.Extract;
            yield return request30;

            EndTransaction("Search for another contact");

            BeginTransaction("Open contact from search results");

            request30.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Contacts/" + Context["foundContact"])));

            request30.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Companies/GetCompanyLookupModels/")));

            request30.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Contacts/GetContactLookupModels/")));

            WebTestRequest request36 = new WebTestRequest((Context["WebServer5"] + "/api/Notes/GetByContactId"));
            request36.ThinkTime = 20;
            request36.QueryStringParameters.Add("contactId", Context["foundContact"].ToString(), false, false);
            yield return request36;

            WebTestRequest request38 = new WebTestRequest((Context["WebServer5"] + "/api/Deals/GetOpenDealsAsDealInfo"));
            request38.ThinkTime = 20;
            request38.QueryStringParameters.Add("contactId", Context["foundContact"].ToString(), false, false);
            request38.ExtractValues += new ExtractText
            {
                StartsWith = "{\"Id\":\"",
                EndsWith = "\"",
                ContextParameterName = "deal",
                ExtractRandomMatch = true,
                Required = false,
            }.Extract;
            yield return request38;

            WebTestRequest request39 = new WebTestRequest((Context["WebServer5"] + "/api/Tasks/GetUpcomingTasksByContactId"));
            request39.ThinkTime = 20;
            request39.QueryStringParameters.Add("contactId", Context["foundContact"].ToString(), false, false);
            yield return request39;

            EndTransaction("Open contact from search results");

            BeginTransaction("Go to phone call note tab");

            request30.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/PhoneCalls/GetByContact/" + Context["foundContact"])));

            request30.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Contacts/" + Context["foundContact"])));

            EndTransaction("Go to phone call note tab");

            BeginTransaction("add phone call note");

            WebTestRequest request44 = new WebTestRequest((Context["WebServer5"] + "/api/PhoneCalls"));
            request44.ThinkTime = 20;
            request44.Method = "POST";
            StringHttpBody request44Body = new StringHttpBody();
            request44Body.ContentType = "application/json;charset=utf-8";
            request44Body.BodyString = "{\"FromName\":\"Wyatt\",\"ToName\":\"Andy\",\"From\":\"2e8ef164-f394-4f82-9f2f-1f783dfac3f5\"" +
                ",\"To\":\"" + Context["foundContact"] + "\",\"CallType\":true,\"Description\":\"" + Context["DataBase.parameters#csv.phone"] 
                + "\",\"PhonedDate\":\"2014-09-17T18:16:02.764Z\"}";
            request44.Body = request44Body;
            yield return request44;

            request44.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Contacts/" + Context["foundContact"])));

            request44.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/PhoneCalls/GetByContact/" + Context["foundContact"])));

            EndTransaction("add phone call note");

            BeginTransaction("make edit to the contact");

            WebTestRequest request47 = new WebTestRequest((Context["WebServer5"] + "/api/Contacts/"));
            request47.ThinkTime = 20;
            request47.Method = "PUT";
            StringHttpBody request47Body = new StringHttpBody();
            request47Body.ContentType = "application/json;charset=utf-8";
            request47Body.BodyString = @"{""Id"":""" + Context["foundContact"] + @""",""SpentWithUs"":0,""CountOngoingDeals"":43,""LastContactedDays"":0,
            ""Description"":"""",""CompanyUrl"":"""",""Fax"":""" + Context["DataBase.parameters#csv.fax"] + @""",""AssistantName"":{""Id"":null,""Name"":"""",""FirstName"":"""",""LastName"":"""",
            ""PhotoUrl"":null,""Company"":"""",""JobTitle"":"""",""Phone"":"""",""Email"":""""},""ManagerName"":{""Id"":null,""Name"":"""",""FirstName"":"""",
            ""LastName"":"""",""PhotoUrl"":null,""Company"":"""",""JobTitle"":"""",""Phone"":"""",""Email"":""""},""ChildrenNames"":"""",
            ""PartnerName"":{""Id"":null,""Name"":"""",""FirstName"":"""",""LastName"":"""",""PhotoUrl"":null,""Company"":"""",""JobTitle"":"""",""Phone"":"""",
            ""Email"":""""},""Anniversary"":null,""Birthday"":{""Date"":" + Context["DataBase.parameters#csv.editDay"] + @",
            ""Month"":" + Context["DataBase.parameters#csv.editMonth"] + @",""Year"":" + Context["DataBase.parameters#csv.editYear"] + @"},
            ""HomeAddressCountry"":"""",""HomeAddressZip"":"""",
            ""HomeAddressState"":"""",""HomeAddressCity"":"""",""HomeAddressStreet"":"""",""BusinessAddressCountry"":"""",""BusinessAddressZip"":"""",
            ""BusinessAddressState"":"""",""BusinessAddressCity"":"""",""BusinessAddressStreet"":"""",""Email"":""email@r.test"",""CellPhone"":""785546587"",
            ""BusinessPhone"":""785546587"",""Title"":"""",""Company"":{""Id"":""567e04af-27bf-4e3e-b02d-e3e4f52ccb6e"",""Name"":""Atom"",""PrimaryContact"":""""},
            ""Photo"":"""",""Name"":""Andy  White"",""LastName"":""White"",""MiddleName"":"""",""FirstName"":""Andy"",""FullName"":""Andy White"",""GridType"":2,
            ""Viewed"":1410977684519}";
            request47.Body = request47Body;
            yield return request47;

            request47.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Contacts/" + Context["foundContact"])));

            request47.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Contacts/GetContactInfo/" + Context["foundContact"])));

            EndTransaction("make edit to the contact");

            if (Context.ContainsKey("deal"))
            {
                BeginTransaction("Open deal");

                request47.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Deals/Get/" + Context["deal"])));

                request47.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Companies/GetCompanyLookupModels/")));

                request47.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Contacts/GetContactLookupModels/")));

                EndTransaction("Open deal");
            }

            BeginTransaction("Add new task");

            WebTestRequest request54 = new WebTestRequest((Context["WebServer5"] + "/api/Tasks/SaveTodo/"));
            request54.ThinkTime = 20;
            request54.Method = "POST";
            StringHttpBody request54Body = new StringHttpBody();
            request54Body.ContentType = "application/json;charset=utf-8";
            request54Body.BodyString = "{\"RelatedEntityType\":0,\"ContactId\":\"" + Context["foundContact"] + "\",\"Subjec" +
                "t\":\"" + Context["DataBase.parameters#csv.task"] + "\",\"TaskStatusIsOpen\":1,\"DueDate\":null}";
            request54.Body = request54Body;
            yield return request54;

            EndTransaction("Add new task");

            BeginTransaction("switch to deals");

            WebTestRequest request55 = new WebTestRequest((Context["WebServer5"] + "/api/Deals/GetAllDealsAsDealInfo"));
            request55.ThinkTime = 20;
            yield return request55;

            EndTransaction("switch to deals");

            BeginTransaction("Search for deal by name  of primary contact");

            WebTestRequest request56 = new WebTestRequest((Context["WebServer5"] + "/api/Search/Get"));
            request56.ThinkTime = 20;
            request56.QueryStringParameters.Add("searchText", Context["DataBase.parameters#csv.searchDeal"].ToString(), false, false);
            request56.ExtractValues += new ExtractText
            {
                StartsWith = ",\"Deals\":[{\"Id\":\"",
                EndsWith = "\",",
                ContextParameterName = "searchDeal",
                ExtractRandomMatch = true,
            }.Extract;
            request56.ExtractValues += new ExtractText
            {
                StartsWith = ",\"Deals\":[{\"Id\":\"",
                EndsWith = "\",",
                ContextParameterName = "anotherDeal",
                ExtractRandomMatch = true,
            }.Extract;
            yield return request56;

            EndTransaction("Search for deal by name  of primary contact");

            BeginTransaction("Open the deal");

            request56.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Deals/Get/" + Context["searchDeal"])));

            request56.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Contacts/GetContactLookupModels/")));

            request56.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Companies/GetCompanyLookupModels/")));

            WebTestRequest request60 = new WebTestRequest((Context["WebServer5"] + "/api/Attachments/GetByDealId"));
            request60.ThinkTime = 20;
            request60.QueryStringParameters.Add("dealId", Context["searchDeal"].ToString(), false, false);
            yield return request60;

            WebTestRequest request61 = new WebTestRequest((Context["WebServer5"] + "/api/Notes/GetByDealId"));
            request61.ThinkTime = 20;
            request61.QueryStringParameters.Add("dealId", Context["searchDeal"].ToString(), false, false);
            yield return request61;

            WebTestRequest request62 = new WebTestRequest((Context["WebServer5"] + "/api/Deals/GetPrimaryContact/" + Context["searchDeal"]));
            request62.ThinkTime = 20;
            yield return request62;

            WebTestRequest request63 = new WebTestRequest((Context["WebServer5"] + "/api/Tasks/GetUpcomingTasksByDealId"));
            request63.ThinkTime = 20;
            request63.QueryStringParameters.Add("dealId", Context["searchDeal"].ToString(), false, false);
            yield return request63;

            EndTransaction("Open the deal");

            BeginTransaction("Look through");

            // switch to phone calls
            request56.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/PhoneCalls/GetByDeal/" + Context["searchDeal"])));

            // Switch to emails
            request56.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Emails/GetPastEmailsForDeal/" + Context["searchDeal"])));

            // switch to notes
            WebTestRequest request69 = new WebTestRequest((Context["WebServer5"] + "/api/Notes/GetByDealId"));
            request69.ThinkTime = 20;
            request69.QueryStringParameters.Add("dealId", Context["searchDeal"].ToString(), false, false);
            yield return request69;

            EndTransaction("Look through");

            BeginTransaction("Edit deal and save changes");

            WebTestRequest request70 = new WebTestRequest((Context["WebServer5"] + "/api/Deals/"));
            request70.ThinkTime = 20;
            request70.Method = "PUT";
            StringHttpBody request70Body = new StringHttpBody();
            request70Body.ContentType = "application/json;charset=utf-8";
            request70Body.BodyString = @"{""EstimatedCloseDate"":{""Year"":2014,""Month"":8,""Date"":17},""ActualCloseDate"":null,
            ""Id"":""" + Context["searchDeal"] + @""",""Name"":""" + Context["DataBase.parameters#csv.deal"] + @""",""CustomerNeed"":null,
            ""Contact"":{""Id"":""" + Context["contact_id"] + @""",
            ""Name"":""Andy White"",""FirstName"":""Andy"",""LastName"":""White"",""PhotoUrl"":null,""Company"":""Atom"",""JobTitle"":"""",""Phone"":""785546587"",
            ""Email"":""email@r.test""},""Company"":{""Id"":""567e04af-27bf-4e3e-b02d-e3e4f52ccb6e"",""Name"":""Atom"",""PrimaryContact"":""""},
            ""ActualRevenue"":""20.00"",""EstimatedRevenue"":""" + Context["DataBase.parameters#csv.estimatedRevenue"] + @""",
            ""BudgetAmount"":0,""DiscountAmount"":0,""TaxAmount"":0,""TotalAmount"":0,""Status"":1,
            ""ReadyToBuyStatus"":0,""Probability"":2,""LastUpdate"":""2014-09-17T15:46:15.930Z"",""GridType"":3,""Viewed"":1410978129903}";
            request70.Body = request70Body;
            yield return request70;

            request70.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Deals/GetDealInfo/" + Context["searchDeal"])));

            request70.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Deals/Get/" + Context["searchDeal"])));

            request70.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Deals/GetPrimaryContact/" + Context["searchDeal"])));

            EndTransaction("Edit deal and save changes");

            BeginTransaction("Add document to the deal");

            WebTestRequest request74 = new WebTestRequest((Context["WebServer5"] + "/Upload/DocumentToDeal"));
            request74.ThinkTime = 20;
            request74.Method = "POST";
            request74.QueryStringParameters.Add("dealId", Context["searchDeal"].ToString(), false, false);
            FormPostHttpBody request74Body = new FormPostHttpBody();
            request74Body.FormPostParameters.Add(new FileUploadParameter("file", Context["DataBase.parameters#csv.doc"].ToString(), 
                "application/vnd.openxmlformats-officedocument.wordprocessingml.document", true));
            request74.Body = request74Body;
            yield return request74;

            WebTestRequest request75 = new WebTestRequest((Context["WebServer5"] + "/api/Attachments/GetByDealId"));
            request75.ThinkTime = 60;
            request75.QueryStringParameters.Add("dealId", Context["searchDeal"].ToString(), false, false);
            yield return request75;

            EndTransaction("Add document to the deal");

            BeginTransaction("Switch to another deal");

            WebTestRequest request76 = new WebTestRequest((Context["WebServer5"] + "/api/Deals/Get/" + Context["anotherDeal"]));
            request76.ThinkTime = 20;
            request76.ExtractValues += new ExtractText
            {
                StartsWith = ",\"Name\":\"",
                EndsWith = "\",",
                ContextParameterName = "dealName",
                ExtractRandomMatch = true,
            }.Extract;
            yield return request76;

            request70.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Contacts/GetContactLookupModels/")));

            request70.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Companies/GetCompanyLookupModels/")));

            WebTestRequest request79 = new WebTestRequest((Context["WebServer5"] + "/api/Attachments/GetByDealId"));
            request79.ThinkTime = 20;
            request79.QueryStringParameters.Add("dealId", Context["anotherDeal"].ToString(), false, false);
            yield return request79;

            WebTestRequest request80 = new WebTestRequest((Context["WebServer5"] + "/api/Notes/GetByDealId"));
            request80.ThinkTime = 20;
            request80.QueryStringParameters.Add("dealId", Context["anotherDeal"].ToString(), false, false);
            yield return request80;

            WebTestRequest request81 = new WebTestRequest((Context["WebServer5"] + "/api/Deals/GetPrimaryContact/" + Context["anotherDeal"]));
            request81.ThinkTime = 20;
            request81.ExtractValues += new ExtractText
            {
                StartsWith = "\"Id\":\"",
                EndsWith = "\",",
                ContextParameterName = "primaryContact",
                ExtractRandomMatch = true,
            }.Extract;
            yield return request81;

            WebTestRequest request82 = new WebTestRequest((Context["WebServer5"] + "/api/Tasks/GetUpcomingTasksByDealId"));
            request82.ThinkTime = 20;
            request82.QueryStringParameters.Add("dealId", Context["anotherDeal"].ToString(), false, false);
            yield return request82;

            EndTransaction("Switch to another deal");

            BeginTransaction("Switch deal to won or lost");

            WebTestRequest request83 = new WebTestRequest((Context["WebServer5"] + "/api/Deals/CloseDealAsLost"));
            request83.ThinkTime = 20;
            request83.Method = "POST";
            StringHttpBody request83Body = new StringHttpBody();
            request83Body.ContentType = "application/json;charset=utf-8";
            request83Body.BodyString = "{\"Id\":\"" + Context["anotherDeal"] + "\",\"DealName\":\"" + Context["dealName"] + "\",\"ActualReven" +
                "ue\":0,\"ActualCloseDate\":{\"Year\":2014,\"Month\":8,\"Date\":17},\"TotalAmount\":0,\"Statu" +
                "s\":1}";
            request83.Body = request83Body;
            yield return request83;

            WebTestRequest request84 = new WebTestRequest((Context["WebServer5"] + "/api/Notes/GetByDealId"));
            request84.ThinkTime = 20;
            request84.QueryStringParameters.Add("dealId", Context["anotherDeal"].ToString(), false, false);
            yield return request84;

            request83.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Deals/GetDealInfo/" + Context["anotherDeal"])));

            request83.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Deals/Get/" + Context["anotherDeal"])));

            request83.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Deals/GetPrimaryContact/" + Context["anotherDeal"])));
 
            EndTransaction("Switch deal to won or lost");

            BeginTransaction("navigate to primary contact");

            request81.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Contacts/")));

            request81.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Contacts/" + Context["primaryContact"])));

            request81.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Companies/GetCompanyLookupModels/")));

            request81.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Contacts/GetContactLookupModels/")));

            WebTestRequest request94 = new WebTestRequest((Context["WebServer5"] + "/api/Notes/GetByContactId"));
            request94.ThinkTime = 20;
            request94.QueryStringParameters.Add("contactId", Context["primaryContact"].ToString(), false, false);
            yield return request94;

            WebTestRequest request95 = new WebTestRequest((Context["WebServer5"] + "/api/Deals/GetOpenDealsAsDealInfo"));
            request95.ThinkTime = 20;
            request95.QueryStringParameters.Add("contactId", Context["primaryContact"].ToString(), false, false);
            yield return request95;

            WebTestRequest request97 = new WebTestRequest((Context["WebServer5"] + "/api/Tasks/GetUpcomingTasksByContactId"));
            request97.ThinkTime = 20;
            request97.QueryStringParameters.Add("contactId", Context["primaryContact"].ToString(), false, false);
            yield return request97;

            EndTransaction("navigate to primary contact");

            BeginTransaction("Add task");

            WebTestRequest request98 = new WebTestRequest((Context["WebServer5"] + "/api/Tasks/SaveTodo/"));
            request98.ThinkTime = 20;
            request98.Method = "POST";
            StringHttpBody request98Body = new StringHttpBody();
            request98Body.ContentType = "application/json;charset=utf-8";
            request98Body.BodyString = "{\"RelatedEntityType\":0,\"ContactId\":\"" + Context["primaryContact"] + "\",\"Subjec" +
                "t\":\"" + Context["DataBase.parameters#csv.task"] + "\",\"TaskStatusIsOpen\":1,\"DueDate\":null}";
            request98.Body = request98Body;
            yield return request98;

            EndTransaction("Add task");

            BeginTransaction("Navigate to the companies");

            WebTestRequest request99 = new WebTestRequest((Context["WebServer5"] + "/api/Companies/"));
            request99.ThinkTime = 20;
            request99.ExtractValues += new ExtractText
            {
                StartsWith = "\"Id\":\"",
                EndsWith = "\",",
                ContextParameterName = "company",
                ExtractRandomMatch = true,
            }.Extract;
            yield return request99;

            EndTransaction("Navigate to the companies");

            BeginTransaction("Open company from the list");

            request99.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Companies/" + Context["company"])));

            WebTestRequest request101 = new WebTestRequest((Context["WebServer5"] + "/api/Contacts/GetContactLookupModels/"));
            request101.ThinkTime = 20;
            request101.ExtractValues += new ExtractText
            {
                StartsWith = "{\"Id\":\"",
                EndsWith = "\"",
                ContextParameterName = "sendMail",
                ExtractRandomMatch = true,
                Required = false,
            }.Extract;
            yield return request101;

            request99.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Companies/GetPrimaryContact/" + Context["company"])));

            request99.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Companies/GetContacts/" + Context["company"])));

            request99.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Contacts/GetContactLookupModels/")));

            WebTestRequest request105 = new WebTestRequest((Context["WebServer5"] + "/api/Notes/GetByCompanyId"));
            request105.ThinkTime = 20;
            request105.QueryStringParameters.Add("companyId", Context["company"].ToString(), false, false);
            yield return request105;

            WebTestRequest request106 = new WebTestRequest((Context["WebServer5"] + "/api/Deals/GetOpenDealsAsDealInfoByCompanyId"));
            request106.ThinkTime = 20;
            request106.QueryStringParameters.Add("companyId", Context["company"].ToString(), false, false);
            yield return request106;

            WebTestRequest request108 = new WebTestRequest((Context["WebServer5"] + "/api/Tasks/GetUpcomingTasksByCompanyId"));
            request108.ThinkTime = 20;
            request108.QueryStringParameters.Add("companyId", Context["company"].ToString(), false, false);
            request108.ExtractValues += new ExtractText
            {
                StartsWith = "{\"Id\":\"",
                EndsWith = "\"",
                ContextParameterName = "task",
                ExtractRandomMatch = true,
                Required = false,
            }.Extract;
            yield return request108;

            EndTransaction("Open company from the list");


            if (Context.ContainsKey("sendMail"))
            {
                BeginTransaction("Send email");

                request101.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Contacts/GetContactLookupModelsForEmail")));

                WebTestRequest request110 = new WebTestRequest((Context["WebServer5"] + "/api/Emails/Send"));
                request110.ThinkTime = 20;
                request110.Method = "POST";
                StringHttpBody request110Body = new StringHttpBody();
                request110Body.ContentType = "application/json;charset=utf-8";
                request110Body.BodyString = "{\"Subject\":\"Hello\",\"Body\":\"" + Context["DataBase.parameters#csv.message"] +
                "\",\"ToContacts\":[{\"Id\":\"" + Context["sendMail"] + "\",\"Email\":\"" + Context["DataBase.parameters#csv.ContactEmail"] +
                "\",\"FirstName\":\"\",\"LastName\":\"\",\"" + "IsSelected\":true,\"ImageUrl\":\"\",\"$$hashKey\":\"5F4\"}],\"CcContacts\":[]}";
                request110.Body = request110Body;
                yield return request110;

                EndTransaction("Send email");

            }
            if (Context.ContainsKey("task"))
            {
                BeginTransaction("delete one task");

                WebTestRequest request112 = new WebTestRequest((Context["WebServer5"] + "/api/Tasks/GetTodoById"));
                request112.ThinkTime = 20;
                request112.QueryStringParameters.Add("id", Context["task"].ToString(), false, false);
                yield return request112;

                WebTestRequest request113 = new WebTestRequest((Context["WebServer5"] + "/api/Tasks/DeleteTodo/"));
                request113.ThinkTime = 20;
                request113.Method = "DELETE";
                request113.QueryStringParameters.Add("id", Context["task"].ToString(), false, false);
                StringHttpBody request113Body = new StringHttpBody();
                request113Body.ContentType = "";
                request113Body.BodyString = "";
                request113.Body = request113Body;
                yield return request113;

                EndTransaction("delete one task");
            }

            BeginTransaction("Create new deal");

            request101.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Companies/" + Context["company"])));

            request101.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Companies/GetCompanyLookupModels/")));

            request101.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Contacts/GetContactLookupModels/")));

            WebTestRequest request117 = new WebTestRequest((Context["WebServer5"] + "/api/Deals/"));
            request117.ThinkTime = 20;
            request117.Method = "PUT";
            StringHttpBody request117Body = new StringHttpBody();
            request117Body.ContentType = "application/json;charset=utf-8";
            request117Body.BodyString = @"{""EstimatedCloseDate"":{""Date"":17,""Month"":8,""Year"":2014},""ActualCloseDate"":null,""ReadyToBuyStatus"":1,
            ""Probability"":2,""Contact"":{""Id"":""" + Context["primaryContact"] + @""",""Name"":""Andy White"",""FirstName"":"""",""LastName"":"""",
            ""PhotoUrl"":null,""Company"":""Atom"",""JobTitle"":"""",""Phone"":"""",""Email"":""""},""Company"":{""Id"":""" + Context["company"] + @""",
            ""Name"":""Atom"",""PrimaryContact"":""""},""Status"":1,""ActualRevenue"":15,
            ""EstimatedRevenue"":""" + Context["DataBase.parameters#csv.EstimatedRevenue"] + @""",""BudgetAmount"":0,""DiscountAmount"":0,
            ""TotalAmount"":0,""Name"":""" + Context["DataBase.parameters#csv.newDeal"] + @""",""CustomerNeed"":""money""}";
            request117.Body = request117Body;
            yield return request117;

            Context["deal_id"] = Regex.Replace(LastResponse.BodyString, pattern, String.Empty);

            request101.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Companies/" + Context["company"])));

            request101.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Deals/GetDealInfo/" + Context["deal_id"])));

            EndTransaction("Create new deal");

            BeginTransaction("Look all past activities and notes");

            request101.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/PhoneCalls/GetByCompany/" + Context["company"])));

            request101.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Companies/" + Context["company"])));

            request101.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/PhoneCalls/GetByCompany/" + Context["company"])));

            request101.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Companies/" + Context["company"])));

            request101.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Emails/GetPastEmailsForCompany/" + Context["company"])));

            WebTestRequest request127 = new WebTestRequest((Context["WebServer5"] + "/api/Deals/GetPastDealsByCompanyId"));
            request127.ThinkTime = 20;
            request127.QueryStringParameters.Add("companyId", Context["company"].ToString(), false, false);
            yield return request127;

            WebTestRequest request128 = new WebTestRequest((Context["WebServer5"] + "/api/Tasks/GetPastTasksByCompanyId"));
            request128.ThinkTime = 20;
            request128.QueryStringParameters.Add("companyId", Context["company"].ToString(), false, false);
            yield return request128;

            WebTestRequest request129 = new WebTestRequest((Context["WebServer5"] + "/api/Notes/GetByCompanyId"));
            request129.ThinkTime = 20;
            request129.QueryStringParameters.Add("companyId", Context["company"].ToString(), false, false);
            yield return request129;

            EndTransaction("Look all past activities and notes");

            temp = rand.Next(10);
            if (temp*10 <= 30)
            {
                BeginTransaction("Delete random contact");

                WebTestRequest request130 = new WebTestRequest((Context["WebServer5"] + "/api/Contacts/"));
                request130.ThinkTime = 20;
                request130.ExtractValues += new ExtractText
                {
                    StartsWith = "{\"Id\":\"",
                    EndsWith = "\"",
                    ContextParameterName = "deleteContact",
                    ExtractRandomMatch = true,
                }.Extract;
                yield return request130;

                request101.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Contacts/" + Context["deleteContact"])));

                request101.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Companies/GetCompanyLookupModels/")));

                request101.DependentRequests.Add(new WebTestRequest((Context["WebServer5"] + "/api/Contacts/GetContactLookupModels/")));

                WebTestRequest request136 = new WebTestRequest((Context["WebServer5"] + "/api/Notes/GetByContactId"));
                request136.ThinkTime = 20;
                request136.QueryStringParameters.Add("contactId", Context["deleteContact"].ToString(), false, false);
                yield return request136;

                WebTestRequest request137 = new WebTestRequest((Context["WebServer5"] + "/api/Deals/GetOpenDealsAsDealInfo"));
                request137.ThinkTime = 20;
                request137.QueryStringParameters.Add("contactId", Context["deleteContact"].ToString(), false, false);
                yield return request137;

                WebTestRequest request139 = new WebTestRequest((Context["WebServer5"] + "/api/Tasks/GetUpcomingTasksByContactId"));
                request139.ThinkTime = 20;
                request139.QueryStringParameters.Add("contactId", Context["deleteContact"].ToString(), false, false);
                yield return request139;

                WebTestRequest request140 = new WebTestRequest((Context["WebServer5"] + "/api/Contacts/"));
                request140.ThinkTime = 20;
                request140.Method = "DELETE";
                request140.QueryStringParameters.Add("ids", Context["deleteContact"].ToString(), false, false);
                StringHttpBody request140Body = new StringHttpBody();
                request140Body.ContentType = "";
                request140Body.BodyString = "";
                request140.Body = request140Body;
                yield return request140;

                EndTransaction("Delete random contact");
            }
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Net;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace BCMJson {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using Microsoft.VisualStudio.TestTools.WebTesting;
    using Microsoft.VisualStudio.TestTools.WebTesting.Rules;
    
    [DeploymentItem("bcmjson\\Parameters\\parameters.csv")]
    [DeploymentItem("bcmjson\\Parameters\\CredentialsTenant.csv")]

    [DataSource("DataBase", "Microsoft.VisualStudio.TestTools.DataSource.CSV", 
        "|DataDirectory|\\parameters.csv", Microsoft.VisualStudio.TestTools.WebTesting.DataBindingAccessMethod.Sequential, 
        Microsoft.VisualStudio.TestTools.WebTesting.DataBindingSelectColumns.SelectOnlyBoundColumns, "parameters#csv")]
    [DataSource("DataBase1", "Microsoft.VisualStudio.TestTools.DataSource.CSV", 
        "|DataDirectory|\\CredentialsTenant.csv", Microsoft.VisualStudio.TestTools.WebTesting.DataBindingAccessMethod.Random,
        Microsoft.VisualStudio.TestTools.WebTesting.DataBindingSelectColumns.SelectOnlyBoundColumns, "CredentialsTenant#csv")]
   
    [DataBinding("DataBase", "parameters#csv", "п»їuser", "DataBase.parameters#csv.п»їuser")]
    [DataBinding("DataBase", "parameters#csv", "password", "DataBase.parameters#csv.password")]
    [DataBinding("DataBase", "parameters#csv", "phone", "DataBase.parameters#csv.phone")]
    [DataBinding("DataBase", "parameters#csv", "note", "DataBase.parameters#csv.note")]
    [DataBinding("DataBase", "parameters#csv", "ContactName", "DataBase.parameters#csv.ContactName")]
    [DataBinding("DataBase", "parameters#csv", "ContactLastName", "DataBase.parameters#csv.ContactLastName")]
    [DataBinding("DataBase", "parameters#csv", "ContactEmail", "DataBase.parameters#csv.ContactEmail")]
    [DataBinding("DataBase", "parameters#csv", "ContactCity", "DataBase.parameters#csv.ContactCity")]
    [DataBinding("DataBase", "parameters#csv", "dateDay", "DataBase.parameters#csv.dateDay")]
    [DataBinding("DataBase", "parameters#csv", "dateMonth", "DataBase.parameters#csv.dateMonth")]
    [DataBinding("DataBase", "parameters#csv", "dateYear", "DataBase.parameters#csv.dateYear")]
    [DataBinding("DataBase", "parameters#csv", "task", "DataBase.parameters#csv.task")]
    [DataBinding("DataBase", "parameters#csv", "estimatedRevenue", "DataBase.parameters#csv.estimatedRevenue")]
    [DataBinding("DataBase", "parameters#csv", "doc", "DataBase.parameters#csv.doc")]
    [DataBinding("DataBase", "parameters#csv", "message", "DataBase.parameters#csv.message")]
    [DataBinding("DataBase", "parameters#csv", "newDeal", "DataBase.parameters#csv.newDeal")]

    [DataBinding("DataBase1", "CredentialsTenant#csv", "LoginTenant", "DataBase1.CredentialsTenant#csv.LoginTenant")]
    [DataBinding("DataBase1", "CredentialsTenant#csv", "TenantId", "DataBase1.CredentialsTenant#csv.TenantId")]

    public class BCMCodedlast : WebTest {
        
        public BCMCodedlast() {
            Context.Add("WebServer1", "https://ibcmperformance.cloudapp.net/");
            PreAuthenticate = true;
            Proxy = "default";
        }
        
        public override IEnumerator<WebTestRequest> GetRequestEnumerator() {

            System.Net.ServicePointManager.Expect100Continue = false;

            BeginTransaction("Load Sign in Page");

            WebTestRequest signIn = new WebTestRequest(Context["WebServer1"].ToString());
            signIn.ThinkTime = 20;
            signIn.ExtractValues += new ExtractHiddenFields
            {
                Required = true,
                ContextParameterName = "SignInHiddenFields",
            }.Extract;
            signIn.ExtractValues += new ExtractText
            {
                StartsWith = "&wctx=",
                EndsWith = "&",
                Required = false,
                ContextParameterName = "wctx",
            }.Extract;
            signIn.ExtractValues += new ExtractText
            {
                StartsWith = "&bk=",
                EndsWith = "\"",
                Required = false,
                ContextParameterName = "bk",
            }.Extract;
            yield return signIn;

            WebTestRequest EnterLogin = new WebTestRequest("https://login.microsoftonline.com/GetUserRealm.srf");
            EnterLogin.ThinkTime = 20;
            EnterLogin.QueryStringParameters.Add("login", Context["DataBase.parameters#csv.п»їuser"].ToString());
            EnterLogin.QueryStringParameters.Add("handler", "1");
            EnterLogin.QueryStringParameters.Add("extended", "1");
            yield return EnterLogin;

            EndTransaction("Load Sign in Page");

            BeginTransaction("Login");

            WebTestRequest Login = new WebTestRequest("https://login.microsoftonline.com/ppsecure/post.srf");
            Login.Method = "POST";
            Login.QueryStringParameters.Add("wa", "wsignin1.0", false, false);
            Login.QueryStringParameters.Add("wtrealm", "https%3a%2f%2flogin.windows.net", false, false);
            Login.QueryStringParameters.Add("wreply", "https%3a%2f%2flogin.windows.net%2fcommon%2fwsfederation", false, false);
            Login.QueryStringParameters.Add("wctx", Context["wctx"].ToString(), false, false);
            Login.QueryStringParameters.Add("wp", "MBI_FED_SSL", false, false);
            Login.QueryStringParameters.Add("id", "", false, false);
            Login.QueryStringParameters.Add("bk", Context["bk"].ToString(), false, false);
            FormPostHttpBody Login3Body = new FormPostHttpBody();
            Login3Body.FormPostParameters.Add("login", Context["DataBase.parameters#csv.п»їuser"].ToString());
            Login3Body.FormPostParameters.Add("passwd", Context["DataBase.parameters#csv.password"].ToString());
            Login3Body.FormPostParameters.Add("PPSX", Context["$HIDDENSignInHiddenFields.PPSX"].ToString());
            Login3Body.FormPostParameters.Add("PPFT", Context["$HIDDENSignInHiddenFields.PPFT"].ToString());
            Login3Body.FormPostParameters.Add("n1", "85987");
            Login3Body.FormPostParameters.Add("n2", "-1410977146000");
            Login3Body.FormPostParameters.Add("n3", "-1410977146000");
            Login3Body.FormPostParameters.Add("n4", "87107");
            Login3Body.FormPostParameters.Add("n5", "87107");
            Login3Body.FormPostParameters.Add("n6", "87107");
            Login3Body.FormPostParameters.Add("n7", "87107");
            Login3Body.FormPostParameters.Add("n8", "NaN");
            Login3Body.FormPostParameters.Add("n9", "87107");
            Login3Body.FormPostParameters.Add("n10", "87107");
            Login3Body.FormPostParameters.Add("n11", "87132");
            Login3Body.FormPostParameters.Add("n12", "87134");
            Login3Body.FormPostParameters.Add("n13", "87132");
            Login3Body.FormPostParameters.Add("n14", "87213");
            Login3Body.FormPostParameters.Add("n15", "25");
            Login3Body.FormPostParameters.Add("n16", "87239");
            Login3Body.FormPostParameters.Add("n17", "87240");
            Login3Body.FormPostParameters.Add("n18", "87249");
            Login3Body.FormPostParameters.Add("n19", "187.6124886534235");
            Login3Body.FormPostParameters.Add("n20", "1");
            Login3Body.FormPostParameters.Add("n21", "0");
            Login3Body.FormPostParameters.Add("n22", "0");
            Login3Body.FormPostParameters.Add("n23", "1");
            Login3Body.FormPostParameters.Add("n24", "11.904773299768066");
            Login3Body.FormPostParameters.Add("n25", "0");
            Login3Body.FormPostParameters.Add("n26", "0");
            Login3Body.FormPostParameters.Add("n27", "0");
            Login3Body.FormPostParameters.Add("n28", "0");
            Login3Body.FormPostParameters.Add("n29", "-1410977233195");
            Login3Body.FormPostParameters.Add("n30", "-1410977233195");
            Login3Body.FormPostParameters.Add("n31", "0");
            Login3Body.FormPostParameters.Add("n32", "0");
            Login3Body.FormPostParameters.Add("n33", "0");
            Login3Body.FormPostParameters.Add("n34", "0");
            Login3Body.FormPostParameters.Add("n35", "0");
            Login3Body.FormPostParameters.Add("n36", "0");
            Login3Body.FormPostParameters.Add("n37", "0");
            Login3Body.FormPostParameters.Add("n38", "0");
            Login3Body.FormPostParameters.Add("n39", "0");
            Login3Body.FormPostParameters.Add("n40", "0");
            Login3Body.FormPostParameters.Add("n41", "1263.3749228273197");
            Login3Body.FormPostParameters.Add("n42", "1245.663573378257");
            Login3Body.FormPostParameters.Add("n43", "1262.583334529809");
            Login3Body.FormPostParameters.Add("type", "11");
            Login3Body.FormPostParameters.Add("LoginOptions", "3");
            Login3Body.FormPostParameters.Add("NewUser", "1");
            Login3Body.FormPostParameters.Add("idsbho", "1");
            Login3Body.FormPostParameters.Add("PwdPad", "");
            Login3Body.FormPostParameters.Add("sso", "");
            Login3Body.FormPostParameters.Add("vv", "");
            Login3Body.FormPostParameters.Add("uiver", "1");
            Login3Body.FormPostParameters.Add("i12", "1");
            Login3Body.FormPostParameters.Add("i13", "Firefox");
            Login3Body.FormPostParameters.Add("i14", "11.0");
            Login3Body.FormPostParameters.Add("i15", "758");
            Login3Body.FormPostParameters.Add("i16", "607");
            Login.Body = Login3Body;
            Login.ExtractValues += new ExtractHiddenFields
            {
                Required = true,
                ContextParameterName = "LoginHiddenfields",
            }.Extract;
            yield return Login;

            WebTestRequest Authentication = new WebTestRequest("https://login.windows.net/common/wsfederation");
            Authentication.Method = "POST";
            FormPostHttpBody AuthenticationBody = new FormPostHttpBody();
            AuthenticationBody.FormPostParameters.Add("wctx", Context["$HIDDENLoginHiddenfields.wctx"].ToString());
            AuthenticationBody.FormPostParameters.Add("wresult", Context["$HIDDENLoginHiddenfields.wresult"].ToString());
            AuthenticationBody.FormPostParameters.Add("wa", Context["$HIDDENLoginHiddenfields.wa"].ToString());
            Authentication.Body = AuthenticationBody;
            Authentication.ExtractValues += new ExtractHiddenFields
            {
                Required = true,
                ContextParameterName = "Authentication",
            }.Extract;
            yield return Authentication;

            WebTestRequest HomePage = new WebTestRequest(Context["WebServer1"].ToString());
            HomePage.Method = "POST";
            FormPostHttpBody HomePageBody = new FormPostHttpBody();
            HomePageBody.FormPostParameters.Add("wa", Context["$HIDDENAuthentication.wa"].ToString());
            HomePageBody.FormPostParameters.Add("wresult", Context["$HIDDENAuthentication.wresult"].ToString());
            HomePageBody.FormPostParameters.Add("wctx", Context["$HIDDENAuthentication.wctx"].ToString());
            HomePage.Body = HomePageBody;
            yield return HomePage;

            WebTestRequest SegueToFakeUser = new WebTestRequest("https://ibcmperformance.cloudapp.net/api/user/login?userPrincipal=" +
                                   Context["DataBase1.CredentialsTenant#csv.LoginTenant"] + "&tenantId=" +
                                   Context["DataBase1.CredentialsTenant#csv.TenantId"]);
            yield return SegueToFakeUser;
            
            WebTestRequest CurrentUserInfo = new WebTestRequest((Context["WebServer1"] + "/api/User/Get"));
            yield return CurrentUserInfo;

            JObject CurrentUser = JObject.Parse(LastResponse.BodyString);
            string CurrentName = (string) (CurrentUser["FirstName"]);
            string CurrentdId = (string) (CurrentUser["ContactId"]);

            WebTestRequest ContactList1 = new WebTestRequest((Context["WebServer1"] + "/api/Contacts/"));
            yield return ContactList1;

            Random rand = new Random();

            JArray contactsArray = JArray.Parse(LastResponse.BodyString);
            string rndcontacts = (string)contactsArray[rand.Next(contactsArray.Count)]["FirstName"];

            EndTransaction("Login");

            BeginTransaction("Add new contact");

            WebTestRequest CompanyList1 = new WebTestRequest((Context["WebServer1"] + "/api/Companies/GetCompanyLookupModels/"));
            yield return CompanyList1;

            WebTestRequest AddContactRequest = new WebTestRequest((Context["WebServer1"] + "/api/Contacts/"));
            AddContactRequest.ThinkTime = 20;
            AddContactRequest.Method = "PUT";
            StringHttpBody AddContactRequest8Body = new StringHttpBody();
            AddContactRequest8Body.ContentType = "application/json;charset=utf-8";
            AddContactRequest8Body.BodyString = @"{""FullName"":"""",""FirstName"":""" + Context["DataBase.parameters#csv.ContactName"] +@""",""MiddleName"":"""",
            ""LastName"":""" + Context["DataBase.parameters#csv.ContactLastName"] + @""",""Name"":"""",""Photo"":"""",
            ""Company"":{""Id"":""567e04af-27bf-4e3e-b02d-e3e4f52ccb6e"",""Name"":""Atom"",""PrimaryContact"":""Andy White""},""Title"":"""",
            ""BusinessPhone"":"""",""CellPhone"":"""",""Email"":""" + Context["DataBase.parameters#csv.ContactEmail"] + @""",""BusinessAddressStreet"":"""",
            ""BusinessAddressCity"":""" + Context["DataBase.parameters#csv.ContactCity"] + @""",""BusinessAddressState"":"""",""BusinessAddressZip"":"""",
            ""BusinessAddressCountry"":"""",""HomeAddressStreet"":"""",""HomeAddressCity"":"""",""HomeAddressState"":"""",""HomeAddressZip"":"""",
            ""HomeAddressCountry"":"""",""Birthday"":null,""Anniversary"":null,""PartnerName"":{""Id"":null,""Name"":"""",""FirstName"":"""",""LastName"":"""",
            ""PhotoUrl"":null,""Company"":"""",""JobTitle"":"""",""Phone"":"""",""Email"":""""},""ChildrenNames"":"""",""ManagerName"":{""Id"":null,""Name"":"""",
            ""FirstName"":"""",""LastName"":"""",""PhotoUrl"":null,""Company"":"""",""JobTitle"":"""",""Phone"":"""",""Email"":""""},
            ""AssistantName"":{""Id"":null,""Name"":"""",""FirstName"":"""",""LastName"":"""",""PhotoUrl"":null,""Company"":"""",""JobTitle"":"""",""Phone"":"""",""Email"":""""},
            ""Fax"":"""",""CompanyUrl"":"""",""Description"":"""",""LastContactedDays"":0,""CountOngoingDeals"":0,""SpentWithUs"":0,""Timestamp"":""""}";
            AddContactRequest.Body = AddContactRequest8Body;
            yield return AddContactRequest;

            Context["contact_id"] = Regex.Replace(LastResponse.BodyString, "\"", String.Empty);

            WebTestRequest ContactInfo = new WebTestRequest((Context["WebServer1"] + "/api/Contacts/GetContactInfo/" + Context["contact_id"]));
            ContactInfo.DependentRequests.Add(new WebTestRequest((Context["WebServer1"] + "/api/Contacts/" + Context["contact_id"])));
            ContactInfo.DependentRequests.Add(new WebTestRequest((Context["WebServer1"] + "/api/Companies/GetCompanyLookupModels/")));
            ContactInfo.DependentRequests.Add(new WebTestRequest((Context["WebServer1"] + "/api/Contacts/GetContactLookupModels/")));
            WebTestRequest ContactInfoDepend1 = new WebTestRequest((Context["WebServer1"] + "/api/Notes/GetByContactId"));
            ContactInfoDepend1.QueryStringParameters.Add("contactId", Context["contact_id"].ToString());
            ContactInfo.DependentRequests.Add(ContactInfoDepend1);
            WebTestRequest ContactInfoDepend2 = new WebTestRequest((Context["WebServer1"] + "/api/Deals/GetOpenDealsAsDealInfo"));
            ContactInfoDepend2.QueryStringParameters.Add("contactId", Context["contact_id"].ToString());
            ContactInfo.DependentRequests.Add(ContactInfoDepend2);
            WebTestRequest ContactInfoDepend3 = new WebTestRequest((Context["WebServer1"] + "/api/Tasks/GetUpcomingTasksByContactId"));
            ContactInfoDepend3.QueryStringParameters.Add("contactId", Context["contact_id"].ToString());
            ContactInfo.DependentRequests.Add(ContactInfoDepend3);
            yield return ContactInfo;

            EndTransaction("Add new contact");

            BeginTransaction("Setup date");

            WebTestRequest SetupaDate = new WebTestRequest((Context["WebServer1"] + "/api/Tasks/SaveTodo/"));
            SetupaDate.ThinkTime = 20;
            SetupaDate.Method = "POST";
            StringHttpBody SetupaDateBody = new StringHttpBody();
            SetupaDateBody.ContentType = "application/json;charset=utf-8";
            SetupaDateBody.BodyString = "{\"DueDate\":{\"Date\":\"" + Context["DataBase.parameters#csv.dateDay"] 
                + "\",\"Month\":\"" + Context["DataBase.parameters#csv.dateMonth"] + "\",\"Year\":\"" 
                + Context["DataBase.parameters#csv.dateYear"] + "\"},\"TaskStatusIsOpen\":1,\"ContactFollow" +
                "Up\":true,\"RelatedEntityType\":0,\"ContactId\":\"" + Context["contact_id"] + "\"}";
            SetupaDate.Body = SetupaDateBody;
            yield return SetupaDate;

            SetupaDate.DependentRequests.Add(new WebTestRequest((Context["WebServer1"] + "/api/Contacts/" + Context["contact_id"])));
            SetupaDate.DependentRequests.Add(new WebTestRequest((Context["WebServer1"] + "/api/Companies/GetCompanyLookupModels/")));
            SetupaDate.DependentRequests.Add(new WebTestRequest((Context["WebServer1"] + "/api/Contacts/GetContactLookupModels/")));
            WebTestRequest SetupaDateDepend1 = new WebTestRequest((Context["WebServer1"] + "/api/Notes/GetByContactId"));
            SetupaDateDepend1.QueryStringParameters.Add("contactId", Context["contact_id"].ToString());
            SetupaDate.DependentRequests.Add(SetupaDateDepend1);
            WebTestRequest SetupaDateDepend2 = new WebTestRequest((Context["WebServer1"] + "/api/Deals/GetOpenDealsAsDealInfo"));
            SetupaDateDepend2.QueryStringParameters.Add("contactId", Context["contact_id"].ToString());
            SetupaDate.DependentRequests.Add(SetupaDateDepend2);
            WebTestRequest SetupaDateDepend3 = new WebTestRequest((Context["WebServer1"] + "/api/Tasks/GetUpcomingTasksByContactId"));
            SetupaDateDepend3.QueryStringParameters.Add("contactId", Context["contact_id"].ToString());
            SetupaDate.DependentRequests.Add(SetupaDateDepend3);
            yield return SetupaDate;

            EndTransaction("Setup date");

            BeginTransaction("Add note");

            WebTestRequest AddNote = new WebTestRequest((Context["WebServer1"] + "/api/Notes/Create"));
            AddNote.ThinkTime = 20;
            AddNote.Method = "POST";
            StringHttpBody AddNoteBody = new StringHttpBody();
            AddNoteBody.ContentType = "application/json;charset=utf-8";
            AddNoteBody.BodyString = "{\"Content\":\"" + Context["DataBase.parameters#csv.note"] + "\",\"ContactId\":\"" + Context["contact_id"] + "\"}";
            AddNote.Body = AddNoteBody;
            yield return AddNote;

            EndTransaction("Add note");

            BeginTransaction("Search for another contact");

            WebTestRequest SearchOtherContact = new WebTestRequest((Context["WebServer1"] + "/api/Search/Get"));
            SearchOtherContact.ThinkTime = 20;
            SearchOtherContact.QueryStringParameters.Add("searchText", rndcontacts);
            SearchOtherContact.ExtractValues += new ExtractText
            {
                StartsWith = "{\"Id\":\"",
                EndsWith = "\"",
                ContextParameterName = "foundContact",
                Required = false
            }.Extract;
            yield return SearchOtherContact;

            EndTransaction("Search for another contact");

            BeginTransaction("Open contact from search results");

            WebTestRequest OpenContactAfterSearch = new WebTestRequest((Context["WebServer1"] + "/api/Contacts/" + Context["foundContact"]));
            OpenContactAfterSearch.ThinkTime = 20;
            OpenContactAfterSearch.QueryStringParameters.Add("contactId", Context["foundContact"].ToString());
            yield return OpenContactAfterSearch;

            JObject CurrentFoundSearch = JObject.Parse(LastResponse.BodyString);
            string foundUserName = (string) CurrentFoundSearch["FirstName"];

            WebTestRequest ContactInfo3 = new WebTestRequest((Context["WebServer1"] + "/api/Companies/GetCompanyLookupModels/"));
            ContactInfo3.DependentRequests.Add(new WebTestRequest((Context["WebServer1"] + "/api/Contacts/GetContactLookupModels/")));
            WebTestRequest ContactInfo3Depend1 = new WebTestRequest((Context["WebServer1"] + "/api/Notes/GetByContactId"));
            ContactInfo3Depend1.QueryStringParameters.Add("contactId", Context["foundContact"].ToString());
            ContactInfo3.DependentRequests.Add(ContactInfo3Depend1);
            WebTestRequest ContactInfo3Depend2 = new WebTestRequest((Context["WebServer1"] + "/api/Deals/GetOpenDealsAsDealInfo"));
            ContactInfo3Depend2.QueryStringParameters.Add("contactId", Context["foundContact"].ToString());
            ContactInfo3Depend2.ExtractValues += new ExtractText
            {
                StartsWith = "{\"Id\":\"",
                EndsWith = "\"",
                ContextParameterName = "deal",
                ExtractRandomMatch = true,
                Required = false,
            }.Extract;
            ContactInfo3.DependentRequests.Add(ContactInfo3Depend2);
            WebTestRequest ContactInfo3Depend3 = new WebTestRequest((Context["WebServer1"] + "/api/Tasks/GetUpcomingTasksByContactId"));
            ContactInfo3Depend3.QueryStringParameters.Add("contactId", Context["foundContact"].ToString());
            ContactInfo3.DependentRequests.Add(ContactInfo3Depend3);
            yield return ContactInfo3;

            EndTransaction("Open contact from search results");

            BeginTransaction("Go to phone call note tab");

            WebTestRequest GoToPhone = new WebTestRequest((Context["WebServer1"] + "/api/PhoneCalls/GetByContact/" + Context["foundContact"]));
            GoToPhone.ThinkTime = 20;
            yield return GoToPhone;

            WebTestRequest ContactlList3 = new WebTestRequest((Context["WebServer1"] + "/api/Contacts/" + Context["foundContact"]));
            yield return ContactlList3;
            
            EndTransaction("Go to phone call note tab");

            BeginTransaction("Add phone call note");

            WebTestRequest AddPhone = new WebTestRequest((Context["WebServer1"] + "/api/PhoneCalls"));
            AddPhone.ThinkTime = 20;
            AddPhone.Method = "POST";
            StringHttpBody AddPhoneBody = new StringHttpBody();
            AddPhoneBody.ContentType = "application/json;charset=utf-8";
            AddPhoneBody.BodyString = "{\"FromName\":\"" + CurrentName + "\",\"ToName\":\"" + foundUserName + "\",\"From\":\"" + CurrentdId + "\"" +
                ",\"To\":\"" + Context["foundContact"] + "\",\"CallType\":true,\"Description\":\"" + Context["DataBase.parameters#csv.phone"]
                + "\",\"PhonedDate\":\"2014-09-17T18:16:02.764Z\"}"; 
            AddPhone.Body = AddPhoneBody;
            yield return AddPhone;

            WebTestRequest ContactlList4 = new WebTestRequest((Context["WebServer1"] + "/api/Contacts/" + Context["foundContact"]));
            yield return ContactlList4;

            JObject modify2 = JObject.Parse(LastResponse.BodyString);
            modify2["Fax"] = rand.Next(1000000, 9999999);
            modify2["CellPhone"] = rand.Next(1000000, 9999999);
            modify2["WorkCity"] = "Minsk";

            WebTestRequest PhoneCallList = new WebTestRequest((Context["WebServer1"] + "/api/PhoneCalls/GetByContact/" + Context["foundContact"]));
            yield return PhoneCallList;

            EndTransaction("Add phone call note");

            BeginTransaction("Make edit to the contact");

            WebTestRequest EditContact = new WebTestRequest((Context["WebServer1"] + "/api/Contacts/"));
            EditContact.ThinkTime = 20;
            EditContact.Method = "PUT";
            StringHttpBody EditContactBody = new StringHttpBody();
            EditContactBody.ContentType = "application/json;charset=utf-8";
            EditContactBody.BodyString = modify2.ToString();
            EditContact.Body = EditContactBody;
            yield return EditContact;

            EditContact.DependentRequests.Add(new WebTestRequest((Context["WebServer1"] + "/api/Contacts/" + Context["foundContact"])));
            EditContact.DependentRequests.Add(new WebTestRequest((Context["WebServer1"] + "/api/Contacts/GetContactInfo/" + Context["foundContact"])));
            yield return EditContact;

            EndTransaction("Make edit to the contact");

            if (Context.ContainsKey("deal"))
            {
                BeginTransaction("Open deal");

                WebTestRequest OpenDeal = new WebTestRequest((Context["WebServer1"] + "/api/Deals/Get/" + Context["deal"]));
                OpenDeal.ThinkTime = 20;
                OpenDeal.DependentRequests.Add(new WebTestRequest((Context["WebServer1"] + "/api/Companies/GetCompanyLookupModels/")));
                OpenDeal.DependentRequests.Add(new WebTestRequest((Context["WebServer1"] + "/api/Contacts/GetContactLookupModels/")));
                yield return OpenDeal;

                EndTransaction("Open deal");
            }

            BeginTransaction("Add new task");

            WebTestRequest AddNewTask = new WebTestRequest((Context["WebServer1"] + "/api/Tasks/SaveTodo/"));
            AddNewTask.ThinkTime = 20;
            AddNewTask.Method = "POST";
            StringHttpBody AddNewTaskBody = new StringHttpBody();
            AddNewTaskBody.ContentType = "application/json;charset=utf-8";
            AddNewTaskBody.BodyString = "{\"RelatedEntityType\":0,\"ContactId\":\"" + Context["foundContact"] + "\",\"Subjec" +
                "t\":\"" + Context["DataBase.parameters#csv.task"] + "\",\"TaskStatusIsOpen\":1,\"DueDate\":null}";
            AddNewTask.Body = AddNewTaskBody;
            yield return AddNewTask;

            EndTransaction("Add new task");

            BeginTransaction("Switch to deals");

            WebTestRequest SwitchDeals = new WebTestRequest((Context["WebServer1"] + "/api/Deals/GetAllDealsAsDealInfo"));
            SwitchDeals.ThinkTime = 20;
            yield return SwitchDeals;

            JArray dealsArray = JArray.Parse(LastResponse.BodyString);
            string rnddeals = (string)dealsArray[rand.Next(dealsArray.Count)]["Title"];

            EndTransaction("Switch to deals");

            BeginTransaction("Search deal");

            WebTestRequest searchForDealByNameOfPrimaryContact = new WebTestRequest((Context["WebServer1"] + "/api/Search/Get"));
            searchForDealByNameOfPrimaryContact.ThinkTime = 20;
            searchForDealByNameOfPrimaryContact.QueryStringParameters.Add("searchText", rnddeals);
            searchForDealByNameOfPrimaryContact.ExtractValues += new ExtractText
            {
                StartsWith = ",\"Deals\":[{\"Id\":\"",
                EndsWith = "\",",
                ContextParameterName = "searchDeal",
                ExtractRandomMatch = true,
            }.Extract;
            searchForDealByNameOfPrimaryContact.ExtractValues += new ExtractText
            {
                StartsWith = ",\"Deals\":[{\"Id\":\"",
                EndsWith = "\",",
                ContextParameterName = "anotherDeal",
                ExtractRandomMatch = true,
            }.Extract;
            yield return searchForDealByNameOfPrimaryContact;

            EndTransaction("Search deal");

            BeginTransaction("Open the deal");

            WebTestRequest OpenTheDeal = new WebTestRequest((Context["WebServer1"] + "/api/Deals/Get/" + Context["searchDeal"]));
            OpenTheDeal.ThinkTime = 20;
            yield return OpenTheDeal;

            JObject modify3 = JObject.Parse(LastResponse.BodyString);
            modify3["ActualRevenue"] = rand.Next(1, 100);
            modify3["EstimatedRevenue"] = rand.Next(1,100) ;

            WebTestRequest ContactInfo2 =new WebTestRequest((Context["WebServer1"] + "/api/Contacts/GetContactLookupModels/"));
            ContactInfo2.DependentRequests.Add(new WebTestRequest((Context["WebServer1"] + "/api/Companies/GetCompanyLookupModels/")));
            WebTestRequest ContactInfo2Depend1 = new WebTestRequest((Context["WebServer1"] + "/api/Attachments/GetByDealId"));
            ContactInfo2Depend1.QueryStringParameters.Add("dealId", Context["searchDeal"].ToString());
            ContactInfo2.DependentRequests.Add(ContactInfo2Depend1);
            WebTestRequest ContactInfo2Depend2 = new WebTestRequest((Context["WebServer1"] + "/api/Notes/GetByDealId"));
            ContactInfo2Depend2.QueryStringParameters.Add("dealId", Context["searchDeal"].ToString());
            ContactInfo2.DependentRequests.Add(ContactInfo2Depend2);
            WebTestRequest ContactInfo2Depend3 = new WebTestRequest((Context["WebServer1"] + "/api/Deals/GetPrimaryContact/" + Context["searchDeal"]));
            ContactInfo2Depend3.QueryStringParameters.Add("dealId", Context["searchDeal"].ToString());
            ContactInfo2.DependentRequests.Add(ContactInfo2Depend3);
            WebTestRequest ContactInfo2Depend4 = new WebTestRequest((Context["WebServer1"] + "/api/Tasks/GetUpcomingTasksByDealId"));
            ContactInfo2Depend4.QueryStringParameters.Add("dealId", Context["searchDeal"].ToString());
            ContactInfo2.DependentRequests.Add(ContactInfo2Depend4);
            yield return ContactInfo2;

            EndTransaction("Open the deal");

            BeginTransaction("Open Calls");

            WebTestRequest OpenCalls = new WebTestRequest((Context["WebServer1"] + "/api/PhoneCalls/GetByDeal/" + Context["searchDeal"]));
            OpenCalls.ThinkTime = 20;
            yield return OpenCalls;

            EndTransaction("Open Calls");

            BeginTransaction("Open Emails");

            WebTestRequest OpenEmails = new WebTestRequest((Context["WebServer1"] + "/api/Emails/GetPastEmailsForDeal/" + Context["searchDeal"]));
            OpenEmails.ThinkTime = 20;
            yield return OpenEmails;

            EndTransaction("Open Emails");

            BeginTransaction("Open Notes");

            WebTestRequest OpenNotes = new WebTestRequest((Context["WebServer1"] + "/api/Notes/GetByDealId"));
            OpenNotes.QueryStringParameters.Add("dealId", Context["searchDeal"].ToString());
            OpenNotes.ThinkTime = 20;
            yield return OpenNotes;

            EndTransaction("Open Notes");

            BeginTransaction("Edit deal and save changes");

            WebTestRequest EditDeal = new WebTestRequest((Context["WebServer1"] + "/api/Deals/"));
            EditDeal.ThinkTime = 20;
            EditDeal.Method = "PUT";
            StringHttpBody editDealBody = new StringHttpBody();
            editDealBody.ContentType = "application/json;charset=utf-8";
            editDealBody.BodyString = modify3.ToString();
            EditDeal.Body = editDealBody;
            yield return EditDeal;

            EditDeal.DependentRequests.Add(new WebTestRequest((Context["WebServer1"] + "/api/Deals/GetDealInfo/" + Context["searchDeal"])));
            EditDeal.DependentRequests.Add(new WebTestRequest((Context["WebServer1"] + "/api/Deals/Get/" + Context["searchDeal"])));
            EditDeal.DependentRequests.Add(new WebTestRequest((Context["WebServer1"] + "/api/Deals/GetPrimaryContact/" + Context["searchDeal"])));
            yield return EditDeal;

            EndTransaction("Edit deal and save changes");

            BeginTransaction("Add document to the deal");

            WebTestRequest AddDocument = new WebTestRequest((Context["WebServer1"] + "/Upload/DocumentToDeal"));
            AddDocument.ThinkTime = 20;
            AddDocument.Method = "POST";
            AddDocument.QueryStringParameters.Add("dealId", Context["searchDeal"].ToString());
            FormPostHttpBody AddDocumentBody = new FormPostHttpBody();
            AddDocumentBody.FormPostParameters.Add(new FileUploadParameter("file", Context["DataBase.parameters#csv.doc"].ToString(), 
                "application/vnd.openxmlformats-officedocument.wordprocessingml.document", true));
            AddDocument.Body = AddDocumentBody;
            yield return AddDocument;

            WebTestRequest AttachmentsInfo = new WebTestRequest((Context["WebServer1"] + "/api/Attachments/GetByDealId"));
            AttachmentsInfo.QueryStringParameters.Add("dealId", Context["searchDeal"].ToString());
            AttachmentsInfo.ThinkTime = 60;
            yield return AttachmentsInfo;

            EndTransaction("Add document to the deal");

            BeginTransaction("Switch to another deal");

            WebTestRequest SwitchToAnotherDeal = new WebTestRequest((Context["WebServer1"] + "/api/Deals/Get/" + Context["anotherDeal"]));
            SwitchToAnotherDeal.ThinkTime = 20;
            yield return SwitchToAnotherDeal;



            JObject Deal = JObject.Parse(LastResponse.BodyString);
            string compareStatus = (string) Deal["Status"];
            string DealName = (string) Deal["Name"];
            string EstimateRevenue = (string) Deal["EstimatedRevenue"];

            WebTestRequest DealInfo1 = new WebTestRequest((Context["WebServer1"] + "/api/Contacts/GetContactLookupModels/"));
            DealInfo1.DependentRequests.Add(new WebTestRequest((Context["WebServer1"] + "/api/Companies/GetCompanyLookupModels/")));
            WebTestRequest DealInfo1Depend1 = new WebTestRequest((Context["WebServer1"] + "/api/Attachments/GetByDealId"));
            DealInfo1Depend1.QueryStringParameters.Add("dealId", Context["anotherDeal"].ToString());
            DealInfo1.DependentRequests.Add(DealInfo1Depend1);
            WebTestRequest DealInfo1Depend2 = new WebTestRequest((Context["WebServer1"] + "/api/Notes/GetByDealId"));
            DealInfo1Depend2.QueryStringParameters.Add("dealId", Context["anotherDeal"].ToString());
            DealInfo1.DependentRequests.Add(DealInfo1Depend2);
            WebTestRequest DealInfo1Depend3 = new WebTestRequest((Context["WebServer1"] + "/api/Deals/GetPrimaryContact/" + Context["anotherDeal"]));
            DealInfo1Depend3.ExtractValues += new ExtractText
            {
                StartsWith = "\"Id\":\"",
                EndsWith = "\",",
                ContextParameterName = "primaryContact",
                Required = false
            }.Extract;
            SwitchToAnotherDeal.DependentRequests.Add(DealInfo1Depend3);
            WebTestRequest DealInfo1Depend4 = new WebTestRequest((Context["WebServer1"] + "/api/Tasks/GetUpcomingTasksByDealId"));
            DealInfo1Depend4.QueryStringParameters.Add("dealId", Context["anotherDeal"].ToString());
            DealInfo1.DependentRequests.Add(DealInfo1Depend4);
            yield return DealInfo1;

            EndTransaction("Switch to another deal");

            if (compareStatus.Equals("Open"))
            {
                BeginTransaction("Switch deal to won or lost");

                string DealStatus;

                if (rand.Next(10) <= 5)
                {
                    DealStatus = "CloseDealAsLost";
                }
                else
                {
                    DealStatus = "CloseDealAsWon";
                }

                WebTestRequest DealToWonOrLost = new WebTestRequest((Context["WebServer1"] + "/api/Deals/" + DealStatus));
                DealToWonOrLost.ThinkTime = 20;
                DealToWonOrLost.Method = "POST";
                StringHttpBody DealToWonOrLostBody = new StringHttpBody();
                DealToWonOrLostBody.ContentType = "application/json;charset=utf-8";
                DealToWonOrLostBody.BodyString = "{\"Id\":\"" + Context["anotherDeal"] + "\",\"DealName\":\"" +
                                                 DealName + "\",\"ActualReven" +
                                                 "ue\":" + EstimateRevenue + ",\"ActualCloseDate\":{\"Year\":2014,\"Month\":8,\"Date\":17},\"TotalAmount\":" + EstimateRevenue + ",\"Statu" +
                                                 "s\":1}";
                DealToWonOrLost.Body = DealToWonOrLostBody;
                yield return DealToWonOrLost;

                WebTestRequest DealToWonOrLostInfo = new WebTestRequest((Context["WebServer1"] + "/api/Notes/GetByDealId"));
                DealToWonOrLostInfo.QueryStringParameters.Add("dealId", Context["anotherDeal"].ToString());
                DealToWonOrLostInfo.DependentRequests.Add(new WebTestRequest((Context["WebServer1"] + "/api/Deals/GetDealInfo/" + Context["anotherDeal"])));
                DealToWonOrLostInfo.DependentRequests.Add(new WebTestRequest((Context["WebServer1"] + "/api/Deals/Get/" + Context["anotherDeal"])));
                DealToWonOrLostInfo.DependentRequests.Add(new WebTestRequest((Context["WebServer1"] + "/api/Deals/GetPrimaryContact/" + Context["anotherDeal"])));
                yield return DealToWonOrLostInfo;

                EndTransaction("Switch deal to won or lost");
            }
            if (Context.ContainsKey("primaryContact"))
            {
                BeginTransaction("Navigate to primary contact");

                WebTestRequest GoToPrimaryContact = new WebTestRequest((Context["WebServer1"] + "/api/Contacts/"));
                GoToPrimaryContact.ThinkTime = 20;
                GoToPrimaryContact.DependentRequests.Add(new WebTestRequest((Context["WebServer1"] + "/api/Contacts/" + Context["primaryContact"])));
                GoToPrimaryContact.DependentRequests.Add(new WebTestRequest((Context["WebServer1"] + "/api/Companies/GetCompanyLookupModels/")));
                GoToPrimaryContact.DependentRequests.Add(new WebTestRequest((Context["WebServer1"] + "/api/Contacts/GetContactLookupModels/")));
                WebTestRequest GoToPrimaryContactDepend1 = new WebTestRequest((Context["WebServer1"] + "/api/Notes/GetByContactId"));
                GoToPrimaryContactDepend1.QueryStringParameters.Add("contactId", Context["primaryContact"].ToString());
                GoToPrimaryContact.DependentRequests.Add(GoToPrimaryContactDepend1);
                WebTestRequest GoToPrimaryContactDepend2 = new WebTestRequest((Context["WebServer1"] + "/api/Deals/GetOpenDealsAsDealInfo"));
                GoToPrimaryContactDepend2.QueryStringParameters.Add("contactId", Context["primaryContact"].ToString());
                GoToPrimaryContact.DependentRequests.Add(GoToPrimaryContactDepend2);
                WebTestRequest GoToPrimaryContactDepend3 = new WebTestRequest((Context["WebServer1"] + "/api/Tasks/GetUpcomingTasksByContactId"));
                GoToPrimaryContactDepend3.QueryStringParameters.Add("contactId", Context["primaryContact"].ToString());
                GoToPrimaryContact.DependentRequests.Add(GoToPrimaryContactDepend3);
                yield return GoToPrimaryContact;

                EndTransaction("Navigate to primary contact");

                BeginTransaction("Add task");

                WebTestRequest AddTask = new WebTestRequest((Context["WebServer1"] + "/api/Tasks/SaveTodo/"));
                AddTask.ThinkTime = 20;
                AddTask.Method = "POST";
                StringHttpBody AddTaskBody = new StringHttpBody();
                AddTaskBody.ContentType = "application/json;charset=utf-8";
                AddTaskBody.BodyString = "{\"RelatedEntityType\":0,\"ContactId\":\"" + Context["primaryContact"] +
                                         "\",\"Subjec" +
                                         "t\":\"" + Context["DataBase.parameters#csv.task"] +
                                         "\",\"TaskStatusIsOpen\":1,\"DueDate\":null}";
                AddTask.Body = AddTaskBody;
                yield return AddTask;

                EndTransaction("Add task");
            }

            BeginTransaction("Navigate to the companies");

            WebTestRequest GoToCompanies = new WebTestRequest((Context["WebServer1"] + "/api/Companies/"));
            GoToCompanies.ThinkTime = 20;
            yield return GoToCompanies;

            JArray companies = JArray.Parse(LastResponse.BodyString);
            JObject company = (JObject) companies[rand.Next(companies.Count)];
            string companyId = (string) company["Id"];
            string companyName = (string)company["Name"];


            EndTransaction("Navigate to the companies");

            BeginTransaction("Open company from the list");

            WebTestRequest OpenCompanyFromList = new WebTestRequest((Context["WebServer1"] + "/api/Companies/" + companyId));
            OpenCompanyFromList.ThinkTime = 20;

            WebTestRequest OpenCompanyFromListDepend1 = new WebTestRequest((Context["WebServer1"] + "/api/Contacts/GetContactLookupModels/"));
            OpenCompanyFromListDepend1.ExtractValues += new ExtractText
            {
                StartsWith = "\"Id\":\"",
                EndsWith = "\"",
                ContextParameterName = "sendMail",
                Required = false,
            }.Extract;
            OpenCompanyFromList.DependentRequests.Add(OpenCompanyFromListDepend1);
            OpenCompanyFromList.DependentRequests.Add(new WebTestRequest((Context["WebServer1"] + "/api/Companies/GetPrimaryContact/" + companyId)));
            OpenCompanyFromList.DependentRequests.Add(new WebTestRequest((Context["WebServer1"] + "/api/Companies/GetContacts/" + companyId)));
            OpenCompanyFromList.DependentRequests.Add(new WebTestRequest((Context["WebServer1"] + "/api/Contacts/GetContactLookupModels/")));
            WebTestRequest OpenCompanyFromListDepend2 = new WebTestRequest((Context["WebServer1"] + "/api/Notes/GetByCompanyId"));
            OpenCompanyFromListDepend2.QueryStringParameters.Add("companyId", companyId);
            OpenCompanyFromList.DependentRequests.Add(OpenCompanyFromListDepend2);
            WebTestRequest OpenCompanyFromListDepend3 = new WebTestRequest((Context["WebServer1"] + "/api/Deals/GetOpenDealsAsDealInfoByCompanyId"));
            OpenCompanyFromListDepend3.QueryStringParameters.Add("companyId", companyId);
            OpenCompanyFromList.DependentRequests.Add(OpenCompanyFromListDepend3);
            WebTestRequest OpenCompanyFromListDepend4 = new WebTestRequest((Context["WebServer1"] + "/api/Tasks/GetUpcomingTasksByCompanyId"));
            OpenCompanyFromListDepend4.QueryStringParameters.Add("companyId", companyId);
            OpenCompanyFromListDepend4.ExtractValues += new ExtractText
            {
                StartsWith = "{\"Id\":\"",
                EndsWith = "\"",
                ContextParameterName = "task",
                ExtractRandomMatch = true,
                Required = false,
            }.Extract;
            OpenCompanyFromList.DependentRequests.Add(OpenCompanyFromListDepend4);
            yield return OpenCompanyFromList;

            EndTransaction("Open company from the list");

            /*if (Context.ContainsKey("sendMail"))
            {
                BeginTransaction("Send email");

                WebTestRequest EmailList1 = new WebTestRequest((Context["WebServer1"] + "/api/Contacts/GetContactLookupModelsForEmail"));
                yield return EmailList1;

                WebTestRequest SendEmail = new WebTestRequest((Context["WebServer1"] + "/api/Emails/Send"));
                SendEmail.ThinkTime = 20;
                SendEmail.Method = "POST";
                StringHttpBody SendEmailBody = new StringHttpBody();
                SendEmailBody.ContentType = "application/json;charset=utf-8";
                SendEmailBody.BodyString = "{\"Subject\":\"Hello\",\"Body\":\"" + Context["DataBase.parameters#csv.message"] +
                "\",\"ToContacts\":[{\"Id\":\"" + Context["sendMail"] + "\",\"Email\":\"" + Context["DataBase.parameters#csv.ContactEmail"] +
                "\",\"FirstName\":\"\",\"LastName\":\"\",\"" + "IsSelected\":true,\"ImageUrl\":\"\",\"$$hashKey\":\"5F4\"}],\"CcContacts\":[]}";
                SendEmail.Body = SendEmailBody;
                yield return SendEmail;

                EndTransaction("Send email");

            }*/

            if (Context.ContainsKey("task"))
            {
                BeginTransaction("Delete one task");

                WebTestRequest TaskList = new WebTestRequest((Context["WebServer1"] + "/api/Tasks/GetTodoById"));
                TaskList.QueryStringParameters.Add("id", Context["task"].ToString());
                yield return TaskList;

                WebTestRequest DeleteOneTask = new WebTestRequest((Context["WebServer1"] + "/api/Tasks/DeleteTodo/"));
                DeleteOneTask.ThinkTime = 20;
                DeleteOneTask.Method = "DELETE";
                DeleteOneTask.QueryStringParameters.Add("id", Context["task"].ToString());
                StringHttpBody DeleteOneTaskBody = new StringHttpBody();
                DeleteOneTaskBody.ContentType = "";
                DeleteOneTaskBody.BodyString = "";
                DeleteOneTask.Body = DeleteOneTaskBody;
                yield return DeleteOneTask;

                EndTransaction("Delete one task");
            }

            BeginTransaction("Create new deal");

            WebTestRequest CompanyPage = new WebTestRequest((Context["WebServer1"] + "/api/Companies/" + companyId));
            CompanyPage.DependentRequests.Add(new WebTestRequest((Context["WebServer1"] + "/api/Companies/GetCompanyLookupModels/")));
            CompanyPage.DependentRequests.Add(new WebTestRequest((Context["WebServer1"] + "/api/Contacts/GetContactLookupModels/")));
            yield return CompanyPage;

            WebTestRequest CreateNewDeal = new WebTestRequest((Context["WebServer1"] + "/api/Deals/"));
            CreateNewDeal.ThinkTime = 20;
            CreateNewDeal.Method = "PUT";
            StringHttpBody CreateNewDealBody = new StringHttpBody();
            CreateNewDealBody.ContentType = "application/json;charset=utf-8";
            CreateNewDealBody.BodyString = @"{""EstimatedCloseDate"":{""Date"":17,""Month"":8,""Year"":2014},""ActualCloseDate"":null,""ReadyToBuyStatus"":1,
            ""Probability"":2,""Contact"":{""Id"":"""",""Name"":"""",""FirstName"":"""",""LastName"":"""",
            ""PhotoUrl"":null,""Company"":"""",""JobTitle"":"""",""Phone"":"""",""Email"":""""},""Company"":{""Id"":""" + companyId + @""",
            ""Name"":""" + companyName + @""",""PrimaryContact"":""""},""Status"":1,""ActualRevenue"":15,
            ""EstimatedRevenue"":""" + Context["DataBase.parameters#csv.EstimatedRevenue"] + @""",""BudgetAmount"":0,""DiscountAmount"":0,
            ""TotalAmount"":0,""Name"":""" + Context["DataBase.parameters#csv.newDeal"] + @""",""CustomerNeed"":""money""}";
            CreateNewDeal.Body = CreateNewDealBody;
            yield return CreateNewDeal;

            Context["deal_id"] = Regex.Replace(LastResponse.BodyString, "\"", String.Empty);

            WebTestRequest CompanyList2 = new WebTestRequest((Context["WebServer1"] + "/api/Companies/" + companyId));
            CompanyList2.DependentRequests.Add(new WebTestRequest((Context["WebServer1"] + "/api/Deals/GetDealInfo/" + Context["deal_id"])));
            yield return CompanyList2;

            EndTransaction("Create new deal");

            BeginTransaction("Look all past activities and notes");

            WebTestRequest LookAllPastActivities = new WebTestRequest((Context["WebServer1"] + "/api/PhoneCalls/GetByCompany/" + companyId));
            LookAllPastActivities.ThinkTime = 60;
            LookAllPastActivities.DependentRequests.Add(new WebTestRequest((Context["WebServer1"] + "/api/Companies/" + companyId)));
            LookAllPastActivities.DependentRequests.Add(new WebTestRequest((Context["WebServer1"] + "/api/PhoneCalls/GetByCompany/" + companyId)));
            LookAllPastActivities.DependentRequests.Add(new WebTestRequest((Context["WebServer1"] + "/api/Companies/" + companyId)));
            LookAllPastActivities.DependentRequests.Add(new WebTestRequest((Context["WebServer1"] + "/api/Emails/GetPastEmailsForCompany/" + companyId)));
            WebTestRequest LookAllPastActivitiesDepend1 = new WebTestRequest((Context["WebServer1"] + "/api/Deals/GetPastDealsByCompanyId"));
            LookAllPastActivitiesDepend1.QueryStringParameters.Add("companyId", companyId);
            LookAllPastActivitiesDepend1.ThinkTime = 20;
            LookAllPastActivities.DependentRequests.Add(LookAllPastActivitiesDepend1);
            WebTestRequest LookAllPastActivitiesDepend2= new WebTestRequest((Context["WebServer1"] + "/api/Tasks/GetPastTasksByCompanyId"));
            LookAllPastActivitiesDepend2.QueryStringParameters.Add("companyId", companyId);
            LookAllPastActivitiesDepend2.ThinkTime = 20;
            LookAllPastActivities.DependentRequests.Add(LookAllPastActivitiesDepend2);
            WebTestRequest LookAllPastActivitiesDepend3 = new WebTestRequest((Context["WebServer1"] + "/api/Notes/GetByCompanyId"));
            LookAllPastActivitiesDepend3.QueryStringParameters.Add("companyId", companyId);
            LookAllPastActivitiesDepend3.ThinkTime = 20;
            LookAllPastActivities.DependentRequests.Add(LookAllPastActivitiesDepend3);
            yield return LookAllPastActivities;

            EndTransaction("Look all past activities and notes");

            if (rand.Next(100) <= 30)
            {
                BeginTransaction("Delete random contact");

                WebTestRequest ContactList2 = new WebTestRequest((Context["WebServer1"] + "/api/Contacts/"));
                ContactList2.ExtractValues += new ExtractText
                {
                    StartsWith = "{\"Id\":\"",
                    EndsWith = "\",\"",
                    ContextParameterName = "deleteContact",
                    ExtractRandomMatch = true,
                }.Extract;
                yield return ContactList2;

                WebTestRequest ContactPage = new WebTestRequest((Context["WebServer1"] + "/api/Contacts/" + Context["deleteContact"]));
                ContactPage.DependentRequests.Add(new WebTestRequest((Context["WebServer1"] + "/api/Companies/GetCompanyLookupModels/")));
                ContactPage.DependentRequests.Add(new WebTestRequest((Context["WebServer1"] + "/api/Contacts/GetContactLookupModels/")));
                WebTestRequest contactPageDepend1 = new WebTestRequest((Context["WebServer1"] + "/api/Notes/GetByContactId"));
                contactPageDepend1.QueryStringParameters.Add("contactId", Context["deleteContact"].ToString());
                ContactPage.DependentRequests.Add(contactPageDepend1);
                WebTestRequest contactPageDepend2 = new WebTestRequest((Context["WebServer1"] + "/api/Deals/GetOpenDealsAsDealInfo"));
                contactPageDepend2.QueryStringParameters.Add("contactId", Context["deleteContact"].ToString());
                ContactPage.DependentRequests.Add(contactPageDepend2);
                WebTestRequest contactPageDepend3 = new WebTestRequest((Context["WebServer1"] + "/api/Tasks/GetUpcomingTasksByContactId"));
                contactPageDepend3.QueryStringParameters.Add("contactId", Context["deleteContact"].ToString());
                ContactPage.DependentRequests.Add(contactPageDepend3);
                yield return ContactPage;

                WebTestRequest DeleteRandomContact = new WebTestRequest((Context["WebServer1"] + "/api/Contacts/"));
                DeleteRandomContact.ThinkTime = 20;
                DeleteRandomContact.Method = "DELETE";
                DeleteRandomContact.QueryStringParameters.Add("ids", Context["deleteContact"].ToString());
                StringHttpBody DeleteRandomContactBody = new StringHttpBody();
                DeleteRandomContactBody.ContentType = "";
                DeleteRandomContactBody.BodyString = "";
                DeleteRandomContact.Body = DeleteRandomContactBody;
                yield return DeleteRandomContact;

                EndTransaction("Delete random contact");
            }
        }
    }
}
